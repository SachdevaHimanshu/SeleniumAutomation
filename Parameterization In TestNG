Parameterization in Selenium: Parameterization is required to create Data Driven Testing.
Parameterization is passing different set of values to the test script or functions at the run time.
Many a times a particular funtionality or feature (Eg Login) has to be tested with multiple set of values hence the test script of that 
funtionality or feature is passed with all permutations and combinations of those values.
This way the we automatically runs test cases multiple times using different values.

Type of Parameterization in TestNG-

1. With the help of  @Parameters annotation and TestNG XML file.
#Here we pass value from the .xml file to the method as an argument in run time.

@Parameters({"URL","Username","Pin"})
@Test
public void Login(String URL, String username, Integer pin)
{
	System.out.println(URL + Username + Pin);
}

Provide below lines in TestNG xml file.
<suite name="Suite">
	<parameter name="URL" value="https://www.amazon.in/"></parameter>
	
	<test name="Test1">
		<parameter name="Username" value="Sachdevahimanshu21"></parameter>
		<parameter name="Pin" value="2112"></parameter>
		<classes>
			<class name="Test.Login" />
		</classes>
	</test>
	
	<test name="Test2">
		<parameter name="Username" value="Sachdevahimanshu21"></parameter>
		<parameter name="Pin" value="2112"></parameter>
		<classes>
			<class name="Test.Login" />
		</classes>
	</test> 
	
</suite> <!-- Suite -->

Explanation: The method Login will run thrice as per the configuration in .xml file. Each time different set of Username and PIn is passed to the method.
Note: @Parameter is convenient to be used when a parameter needs to be passed to the code that does not change through out.
like the URL. If mutiple values are required to be passed it is better to use @DataProvider.

Note: Parameters can be placed in suite level and test level in the xml file. If
The Same parameter name is declared in both places; test level parameter will get preference over suit level parameter.

1. With the help of @Dataprovider annotation.
It has only one attribute 'name'. If you do not specify the name attribute then the DataProvider's name will be same as the corresponding method name.
Data provider returns a two-dimensional JAVA object (Object [M][N] )to the test method.
Where M is the number of times the values will be provided and N is the number of values that will be provided.
 For example, if the DataProvider returns an array of 3*2 objects, the corresponding testcase will be invoked 3 times with 2 parameters each time.
	
	
	@DataProvider(name="UsernamePasswordList")
	public static Object[][] GetUsernamePasswordList() throws IOException
	{	
		Object[][] data=GetDataFromExcel();
		return data;	
	}
	
	//Below method is calling the data provider method, hence dataProvider attribute is mentioned for @Test annotation
	@Test(dataProvider = "UsernamePasswordList")
	public void SubmitCorrectEmailTest(String Username, String Password)
	{
		System.out.println(Username + Password);
	}
Important points:

