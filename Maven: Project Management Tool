Maven is a powerful Project Management and build management tool. It provides following features and advantage.
1. Central repository to get dependencies.
2. Maintaining common project structure across the organizatiom: The src/main/java directory contains the project source code, the src/test/java directory contains 
the test source, and the pom.xml file is the configuration file.
3. Flexibility in integrating with CI tools like Jenkins. 

Maven POM
POM is a Project Object Model XML file that contains information about the project and configuration details used by Maven to build the project. 
It contains default values for most projects. Some of the configurations that can be specified in the POM are the project dependencies, 
the plugins or goals that can be executed, the build profiles, and so on.

Surefire Plugin
The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application. It generates reports in 2 different file formats:
1. Plain text files (*.txt)
2. XML files (*.xml)
By default, these files are generated in ${basedir}/target/surefire-reports/TEST-*.xml.

Note: The Surefire Plugin has only one goal: surefire:test -runs the unit tests of an application.
The Surefire Plugin can be invoked by calling the test phase of the build lifecycle: mvn test
This plugin will help to execute all the test cases present in test folder: src/test/java.
As long as they are named in accordance with the defaults such as *Test.java they will be run by Surefire as TestNG tests.
But if there is a .java class that is not following the above naming convention but still needs to be inluded then use below.
        <configuration>
          <includes>
            <include>Sample.java</include>
          </includes>
        </configuration>
And to exclude use below:
	<configuration>
          <excludes>
            <exclude>**/TestCircle.java</exclude>
            <exclude>**/TestSquare.java</exclude>
          </excludes>
        </configuration>


maven commands: clean
compile: checks syntax errors of code
test: if command test is given then maven first compiles then test.

Using Suite XML Files: Another alternative is to use TestNG suite XML files. This allows flexible configuration of the tests to be run. 

<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.0.0-M5</version>
					
					<configuration>
						<suiteXmlFiles>
							<suiteXmlFile>SignInPageTestNg.xml</suiteXmlFile>
						</suiteXmlFiles>
					</configuration>
          
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

Profiling in Maven.
Within build tag we can tell sure fire plugin which Testng.xml file to run.
Suppose there are 2 testng.xml file , one for regression and one for smoke testing.
then we can create 2 profiles , one for each.
And run command : test -PRegression or test -PSmoke

Build Lifecycle Basics : https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html


 Maven Goal
 Each phase is a sequence of goals, and each goal is responsible for a specific task.
 When we run a phase – all goals bound to this phase are executed in order.
 Here are some of the phases and default goals bound to them:

compiler:compile – the compile goal from the compiler plugin is bound to the compile phase
compiler:testCompile is bound to the test-compile phase
surefire:test is bound to test phase
install:install is bound to install phase
jar:jar and war:war is bound to package phase
We can list all goals bound to a specific phase and their plugins using the command:
mvn help:describe -Dcmd=PHASENAME
For example, to list all goals bound to the compile phase, we can run:

mvn help:describe -Dcmd=compile
