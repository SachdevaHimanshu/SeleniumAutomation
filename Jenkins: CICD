Jenkins: Continous Integration and Continuous Delivery.
When our automated tests are ready we club all required tests and run those tests either by running Testng.xml or running POM.xml(maven command) file manually by using run as in eclipse.
This is also a manual task which needs to be automated. If a set of test cases are supposed to be run daily at mid night to as to receive the report
in morning we should not be running test manually in eclipse at mid night.
The solution is to create/Schedule a JOB in Jenkins. 

Jenkins facilitates continuous integration and continuous delivery in software projects by automating parts related to build, test, and deployment.


Install and Configure Jenkins in local system.

Download jenkins.war file and place it in an Folder like : Documents

Starting Jenkins: 
1. Open the command prompt. From the command prompt, browse to the directory where the jenkins.war file is present.
cd C:\Users\Himanshu\Documents\Jenkins
2. Run the following command
java -jar jenkins.war -httpPort=8080
3. Open Chrome and enter URL: http://localhost:8080/
4.  Enter Username : Himansach and Password: ***

Jenkins Plugins
Jenkins achieves Continuous Integration with the help of plugins. Plugins allow the integration of Various DevOps stages.
By default, Jenkins comes with a limited set of features. If you want to integrate your Jenkins installation with version control tools like Git, 
then you need to install plugins related to Git. In fact, for integration with tools like Maven, Amazon EC2, you need to install respective plugins in your Jenkins.

Architecture Of Jenkins

Before we dive into how does Jenkins work, we must understand the architecture of Jenkins. These are the series of steps that outlines the interaction between 
different elements in Jenkins:

1. Developers do the necessary modifications in the source code and commit the changes to the repository. A new version of that file will be created in the version 
control system that is used for maintaining the repository of source code.

2.  The repository is continuously checked by Jenkins CI server for any changes (either in the form of code or libraries) and changes are pulled by the server.

3. In the next step, we ensure that the build with the ‘pulled changes’ is going through or not. The Build server performs a build with the code and an executable
is generated if the build process is successful. In case of a build failure, an automated email with a link to build logs and other build artifacts is sent to the developer.

4. In case of a successful build, the built application (or executable) is deployed to the test server. This step helps in realizing continuous testing where the 
newly built executable goes through a series of automated tests. Developers are alerted in case the changes have caused any breakage in functionality.

5. If there are no build, integration, and testing issues with the checked-in code, the changes and tested application are automatically deployed to 
the Prod/Production server.

What Is Jenkins Pipeline?
Jenkins Pipeline (or simply "Pipeline") is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins.

A continuous delivery pipeline is an automated expression of your process for getting software from version control right through to your users and customers.

Jenkins Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines "as code". The definition of a Jenkins Pipeline is typically
written into a text file (called a Jenkinsfile) which in turn is checked into a project’s source control repository. [1]



