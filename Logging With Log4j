Logging With Log4j
During the running of test case, user wants some information to be logged in the console or a File.
A well written log inside code offers quick debugging, easy maintenance and structured storage of application runtime info.

Log4j has three principal components
1. Loggers: Responsible for capturing logging info.
2. Appenders: Responsible for publishing the logged info into varios preferred destination like console or a file.
3. Layouts: Used for fomatting logging info in different styles.

#Loggers: Primarily there are five kinds of log levels. A log level or log severity is a piece of information telling how important a given log message is. 
All - This level of logging will log everything ( it turns all the logs on )

TRACE – the most fine-grained information only used in rare cases where you need the full visibility of what is happening in your application and inside the third-party
libraries that you use. You can expect the TRACE logging level to be very verbose. You can use it for example to annotate each step in the algorithm or each individual 
query with parameters in your code.

DEBUG – less granular compared to the TRACE level, but it is more than you will need in everyday use. The DEBUG log level should be used for information that may be 
needed for diagnosing issues and troubleshooting or when running application in the test environment for the purpose of making sure everything is running correctly

INFO – the standard log level indicating that something happened, the application entered a certain state, etc. For example, a controller of your authorization API may
include an INFO log level with information on which user requested authorization if the authorization was successful or not. The information logged using the INFO log 
level should be purely informative and not looking into them on a regular basis shouldn’t result in missing any important information.

WARN – the log level that indicates that something unexpected happened in the application, a problem, or a situation that might disturb one of the processes. But that
doesn’t mean that the application failed. The WARN level should be used in situations that are unexpected, but the code can continue the work. For example, a parsing 
error occurred that resulted in a certain document not being processed.

ERROR – the log level that should be used when the application hits an issue preventing one or more functionalities from properly functioning. The ERROR log level can 
be used when one of the payment systems is not available, but there is still the option to check out the basket in the e-commerce application or when your social media 
logging option is not working for some reason.

FATAL – the log level that tells that the application encountered an event or entered a state in which one of the crucial business functionality is no longer working. 
A FATAL log level may be used when the application is not able to connect to a crucial data store like a database or all the payment systems are not available and users 
can’t checkout their baskets in your e-commerce.



Steps to integrate Log4j with project.

1. Download jar files or provide info in Pom.xml in maven project
<!-- https://mvnrepository.com/artifact/log4j/log4j -->	
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-api</artifactId>
				<version>2.14.1</version>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>2.14.1</version>
			</dependency>
      
2. Create a new XML file – log4j.xml and place it under the Project root folder: src\test\resources
3) Paste the following code in the log4j.xml file.

<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
	<Properties>
		<Property name="basePath">./Logs</Property>
	</Properties>

	<Appenders>
  
		<RollingFile name="File" fileName="${basePath}/Prints.log"
			filePattern="${basePath}/Prints-%d{yyyy-MM-dd}.log">
			<PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
			<SizeBasedTriggeringPolicy size="5000" />
		</RollingFile>

		<Console name="Console" target="SYSTEM_OUT">
			<PatternLayout
				pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
		</Console>

	</Appenders>

	<Loggers>
		
    <Root level="trace">
			<AppenderRef ref="File" />
			<AppenderRef ref="Console" />
		</Root>
    
	</Loggers>

</Configuration>

4. Create a Class and Create a Logger object inside that class.
Invoke getLogger() method of Logger class and pass the className.class as an argument to it.
Use this object with any of the log levels with our own text.
eg. 
public class Log {

// Initialize Log4j logs
	private static Logger logger=LogManager.getLogger(Log.class.getName()); 
  
  public static void info(String message) {
	 logger.info(message);
		}

 public static void warn(String message) {
	 logger.warn(message);
	}
}
